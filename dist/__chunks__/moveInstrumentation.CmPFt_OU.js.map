{"version":3,"file":"moveInstrumentation.CmPFt_OU.js","sources":["../../src/helpers/moveAttributes.ts","../../src/helpers/moveInstrumentation.ts"],"sourcesContent":["/**\n * Moves all the attributes from a given elmenet to another given element.\n * @param {Element} from the element to copy attributes from\n * @param {Element} to the element to copy attributes to\n * @param {string[]} attributes the attributes to be moved\n */\nexport function moveAttributes(from: Element, to: Element, attributes: string[]) {\n  if (!attributes) {\n    // eslint-disable-next-line no-param-reassign\n    attributes = [...from.attributes].map(({ nodeName }) => nodeName);\n  }\n  attributes.forEach((attr) => {\n    const value = from.getAttribute(attr);\n    if (value) {\n      to.setAttribute(attr, value);\n      from.removeAttribute(attr);\n    }\n  });\n}\n","import { DebuggerService } from '@kluntje/services';\n\nimport { moveAttributes } from './moveAttributes';\n\n/**\n * Move instrumentation attributes that starts with \"data-aue-\" or \"data-richtext-\"  from a given element to another given element.\n * @param {Element | string} from the element or CSS selctor to copy attributes from\n * @param {Element | string} to the element or CSS selector to copy attributes to\n * @returns {void}\n * @example\n * // With CSS selectors as arguments:\n * moveInstrumentation('.quote', '.quote__content');\n *\n * // Or with elements as arguments:\n * moveInstrumentation(document.querySelector('.quote'), document.querySelector('.quote__content'));\n *\n * // Or with a mix of CSS selector and element as arguments:\n * moveInstrumentation('.quote', document.querySelector('.quote__content'));\n *\n * // Example HTML:\n * // <blockquote class=\"quote\" data-aue-attribute=\"value\">Quote</blockquote>\n * // <div class=\"quote__content\"></div>\n *\n * // Usage:\n * moveInstrumentation('.quote', '.quote__content');\n *\n * // Result:\n * // <blockquote class=\"quote\">Quote</blockquote>\n * // <div class=\"quote__content\" data-aue-attribute=\"value\"></div>\n */\nexport function moveInstrumentation(from: Element | string, to: Element | string): void {\n  try {\n    let fromEl: Element | null;\n    let toEl: Element | null;\n\n    if (typeof from === 'string') {\n      fromEl = document.querySelector(from);\n\n      if (fromEl === null) {\n        throw new Error(`Element with selector ${from} not found`);\n      }\n    } else {\n      fromEl = from;\n    }\n\n    if (typeof to === 'string') {\n      toEl = document.querySelector(to);\n\n      if (toEl === null) {\n        throw new Error(`Element with selector ${to} not found`);\n      }\n    } else {\n      toEl = to;\n    }\n\n    moveAttributes(\n      fromEl,\n      toEl,\n      [...fromEl.attributes]\n        .map(({ nodeName }) => nodeName)\n        .filter((attr) => attr.startsWith('data-aue-') || attr.startsWith('data-richtext-'))\n    );\n  } catch (error) {\n    DebuggerService.error(error);\n  }\n}\n"],"names":["moveAttributes","from","to","attributes","nodeName","attr","value","moveInstrumentation","fromEl","toEl","error","DebuggerService"],"mappings":"+CAMgB,SAAAA,EAAeC,EAAeC,EAAaC,EAAsB,CAC1EA,IAEUA,EAAA,CAAC,GAAGF,EAAK,UAAU,EAAE,IAAI,CAAC,CAAE,SAAAG,KAAeA,CAAQ,GAEvDD,EAAA,QAASE,GAAS,CACrB,MAAAC,EAAQL,EAAK,aAAaI,CAAI,EAChCC,IACCJ,EAAA,aAAaG,EAAMC,CAAK,EAC3BL,EAAK,gBAAgBI,CAAI,EAC3B,CACD,CACH,CCYgB,SAAAE,EAAoBN,EAAwBC,EAA4B,CAClF,GAAA,CACE,IAAAM,EACAC,EAEA,GAAA,OAAOR,GAAS,UAGlB,GAFSO,EAAA,SAAS,cAAcP,CAAI,EAEhCO,IAAW,KACb,MAAM,IAAI,MAAM,yBAAyBP,CAAI,YAAY,OAGlDO,EAAAP,EAGP,GAAA,OAAOC,GAAO,UAGhB,GAFOO,EAAA,SAAS,cAAcP,CAAE,EAE5BO,IAAS,KACX,MAAM,IAAI,MAAM,yBAAyBP,CAAE,YAAY,OAGlDO,EAAAP,EAGTF,EACEQ,EACAC,EACA,CAAC,GAAGD,EAAO,UAAU,EAClB,IAAI,CAAC,CAAE,SAAAJ,CAAe,IAAAA,CAAQ,EAC9B,OAAQC,GAASA,EAAK,WAAW,WAAW,GAAKA,EAAK,WAAW,gBAAgB,CAAC,CAAA,QAEhFK,EAAO,CACdC,EAAgB,MAAMD,CAAK,CAC7B,CACF"}