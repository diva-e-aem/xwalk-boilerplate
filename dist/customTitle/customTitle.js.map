{"version":3,"file":"customTitle.js","sources":["../../src/blocks/customTitle/customTitle.ts"],"sourcesContent":["import { html, literal, StaticValue } from 'lit/static-html.js';\nimport { nothing, render, TemplateResult } from 'lit';\nimport './customTitle.scss';\n\nimport { getElementData } from 'Utils/getElementData';\nimport { moveInstrumentation } from 'Helpers/moveInstrumentation';\nimport { getBlockModifiers } from 'Utils/getBlockModifiers';\nimport { cleanUpBlock } from 'Utils/cleanUpBlock';\n\ntype TemplateProps = {\n  titleText?: string;\n  subline?: string;\n  tagName?: string;\n  cssClass?: string;\n  sublineLarge?: string;\n};\n\nconst possibleStyleModifiers = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nconst getStyleModifier = (modifiers: string[]) => {\n  return modifiers.find((modifier) => possibleStyleModifiers.includes(modifier)) || 'h1';\n};\n\nconst renderHeadline = (tagName: string, text: string, cssClass: string) => {\n  const tagMap: Record<string, StaticValue> = {\n    h1: literal`h1`,\n    h2: literal`h2`,\n    h3: literal`h3`,\n    h4: literal`h4`,\n    h5: literal`h5`,\n    h6: literal`h6`,\n  };\n\n  const tag = tagMap[tagName];\n\n  return html`\n    <${tag} class=\"module-headline ${cssClass}\">${text}</${tag}>\n  `;\n};\n\nconst renderSubline = (subline: string, sublineLarge?: string) => {\n  if (subline === '') return nothing;\n  return html`<p class=\"module-subtitle${sublineLarge === 'large-subline' ? ' large-subline' : ''}\">${subline}</p>`;\n};\n\nconst template = ({\n  titleText,\n  subline = '',\n  tagName = 'h2',\n  cssClass = 'h1',\n  sublineLarge = '',\n}: TemplateProps): TemplateResult | typeof nothing => {\n  if (!titleText) {\n    return nothing;\n  }\n\n  return html`\n    <div class=\"module-title\" data-js-richtext>\n      ${renderHeadline(tagName, titleText, cssClass)}${renderSubline(subline, sublineLarge)}\n    </div>\n  `;\n};\n\nexport default function (block: HTMLElement) {\n  const modifiers = getBlockModifiers(block, 'customtitle');\n  const getDataForRow = getElementData(block);\n  const { title } = getDataForRow(0, ['title']);\n  const { subline } = getDataForRow(1, ['subline']);\n  const titleElement = title.element;\n  const sublineElement = subline.element;\n  const tagName = titleElement?.tagName.toLowerCase() || 'h2';\n\n  // cleanUpBlock(block);\n\n  render(block, block);\n  // render(\n  //   template({\n  //     titleText: titleElement?.textContent || '',\n  //     subline: sublineElement?.innerHTML || '',\n  //     tagName,\n  //     cssClass: getStyleModifier(modifiers),\n  //     sublineLarge: modifiers.includes('large-subline') ? 'large-subline' : '',\n  //   }),\n  //   block\n  // );\n\n  // const newRichtextEl = block.querySelector('[data-js-richtext]');\n  // if (richtextEl && newRichtextEl) moveInstrumentation(richtextEl, newRichtextEl);\n}\n"],"names":["customTitle","block","getBlockModifiers","getDataForRow","getElementData","title","subline","titleElement","render"],"mappings":"iIA+DA,SAAAA,EAAyBC,EAAoB,CACzBC,EAAkBD,EAAO,aAAa,EAClD,MAAAE,EAAgBC,EAAeH,CAAK,EACpC,CAAE,MAAAI,CAAM,EAAIF,EAAc,EAAG,CAAC,OAAO,CAAC,EACtC,CAAE,QAAAG,CAAQ,EAAIH,EAAc,EAAG,CAAC,SAAS,CAAC,EAC1CI,EAAeF,EAAM,QACJC,EAAQ,QACfC,GAAA,MAAAA,EAAc,QAAQ,cAItCC,EAAOP,EAAOA,CAAK,CAcrB"}