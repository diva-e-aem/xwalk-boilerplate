{"version":3,"file":"customtitle.js","sources":["../../src/utils/createAttributeMap.ts","../../src/utils/getElementData.ts","../../src/blocks/customtitle/customtitle.ts"],"sourcesContent":["export function createAttributeMap(element: Element) {\n  const attributes = element.attributes;\n  return [...attributes]\n    .map(({ nodeName }) => nodeName)\n    .filter((attr) => attr.startsWith('data-aue-') || attr.startsWith('data-richtext-'))\n    .map((attribute) => {\n      return {\n        [attribute]: element.getAttribute(attribute),\n      };\n    });\n}\n","import { createAttributeMap } from './createAttributeMap';\n\nexport function getElementData(block: HTMLElement) {\n  return (rowIndex: number = 0) => {\n    const row = block.children[rowIndex] as HTMLElement;\n\n    let element = row;\n\n    // find the deepest child element\n    while (element.children.length) {\n      element = element.children[0] as HTMLElement;\n    }\n\n    return {\n      element,\n      textContent: element?.textContent || undefined,\n      innerHTML: element?.innerHTML || undefined,\n      dataAttributes: element ? createAttributeMap(element) : undefined,\n    };\n  };\n}\n","import { html, nothing, render, TemplateResult } from 'lit';\n\nimport { cleanUpBlock } from 'Utils/cleanUpBlock';\nimport { getElementData } from 'Utils/getElementData';\n\nimport './customtitle.scss';\n\ntype TemplateProps = {\n  titleText?: string;\n  titleType?: string | undefined;\n  titleAttributes?: Record<string, string>;\n};\n\nconst template = ({ titleText, titleType = 'h2' }: TemplateProps): TemplateResult | typeof nothing => {\n  if (!titleText) {\n    return nothing;\n  }\n\n  return html`\n    <div style=\"background: red\">\n      <h1 data-js-title-type>${titleText}</h1>\n    </div>\n  `;\n};\n\nexport default function (block: HTMLElement) {\n  // eslint-disable-next-line no-console\n  console.log('>>> decorate block b', block);\n\n  const getDataForRow = getElementData(block);\n  const { textContent: titleText, dataAttributes: titleAttributes } = getDataForRow(0);\n  const { textContent: titleType } = getDataForRow(1);\n\n  console.log('>>> titleText', titleText);\n\n  cleanUpBlock(block);\n  render(template({ titleText, titleType }), block);\n\n  // eslint-disable-next-line no-console\n  console.log('>>> rendered a');\n\n  const headline = block.querySelector('[data-js-title-type]');\n  titleAttributes?.forEach((attr) => {\n    const key = Object.keys(attr)[0];\n    const value = attr[key];\n    if (!value) return;\n    headline?.setAttribute(key, value);\n  });\n}\n"],"names":["createAttributeMap","element","nodeName","attr","attribute","getElementData","block","rowIndex","template","titleText","titleType","html","nothing","customtitle","getDataForRow","titleAttributes","cleanUpBlock","render","headline","key","value"],"mappings":"mIAAO,SAASA,EAAmBC,EAAkB,CAE5C,MAAA,CAAC,GADWA,EAAQ,UACN,EAClB,IAAI,CAAC,CAAE,SAAAC,KAAeA,CAAQ,EAC9B,OAAQC,GAASA,EAAK,WAAW,WAAW,GAAKA,EAAK,WAAW,gBAAgB,CAAC,EAClF,IAAKC,IACG,CACL,CAACA,CAAS,EAAGH,EAAQ,aAAaG,CAAS,CAAA,EAE9C,CACL,CCRO,SAASC,EAAeC,EAAoB,CAC1C,MAAA,CAACC,EAAmB,IAAM,CAG/B,IAAIN,EAFQK,EAAM,SAASC,CAAQ,EAK5B,KAAAN,EAAQ,SAAS,QACZA,EAAAA,EAAQ,SAAS,CAAC,EAGvB,MAAA,CACL,QAAAA,EACA,aAAaA,GAAA,YAAAA,EAAS,cAAe,OACrC,WAAWA,GAAA,YAAAA,EAAS,YAAa,OACjC,eAAgBA,EAAUD,EAAmBC,CAAO,EAAI,MAAA,CAC1D,CAEJ,CCPA,MAAMO,EAAW,CAAC,CAAE,UAAAC,EAAW,UAAAC,EAAY,QACpCD,EAIEE,uDAEsBF,CAAS,cAL7BG,EAUX,SAAAC,EAAyBP,EAAoB,CAEnC,QAAA,IAAI,uBAAwBA,CAAK,EAEnC,MAAAQ,EAAgBT,EAAeC,CAAK,EACpC,CAAE,YAAaG,EAAW,eAAgBM,GAAoBD,EAAc,CAAC,EAC7E,CAAE,YAAaJ,CAAU,EAAII,EAAc,CAAC,EAE1C,QAAA,IAAI,gBAAiBL,CAAS,EAEtCO,EAAaV,CAAK,EAClBW,EAAOT,EAAS,CAAE,UAAAC,EAAW,UAAAC,CAAW,CAAA,EAAGJ,CAAK,EAGhD,QAAQ,IAAI,gBAAgB,EAEtB,MAAAY,EAAWZ,EAAM,cAAc,sBAAsB,EAC1CS,GAAA,MAAAA,EAAA,QAASZ,GAAS,CACjC,MAAMgB,EAAM,OAAO,KAAKhB,CAAI,EAAE,CAAC,EACzBiB,EAAQjB,EAAKgB,CAAG,EACjBC,IACKF,GAAA,MAAAA,EAAA,aAAaC,EAAKC,GAAK,EAErC"}