{"version":3,"file":"customtitle.js","sources":["../../src/blocks/customtitle/customtitle.ts"],"sourcesContent":["import { html, render, TemplateResult } from 'lit';\n\nimport { cleanUpBlock } from 'Utils/cleanUpBlock';\n\nimport './customtitle.scss';\n\n// type TemplateProps = {\n//   titleText?: string;\n//   titleType?: HeadlineTags | undefined;\n//   titleAttributes?: Record<string, string>;\n// };\n\n// const template = ({ titleText, titleType = 'h2' }: TemplateProps): TemplateResult | typeof nothing => {\n//   if (!titleText) {\n//     return nothing;\n//   }\n\n//   const tag = headlineTagMap[titleType];\n\n//   return html`\n//     <div style=\"background: red\">\n//       <${tag} data-js-title-type>${titleText}</${tag}>\n//     </div>\n//   `;\n// };\n\nconst template2 = (): TemplateResult => {\n  return html`<div style=\"background: yellow\"><h2>Hello World</h2></div> `;\n};\n\nexport default function (block: HTMLElement) {\n  // const getDataForProperty = getElementData(block);\n  // const { textContent: titleText, dataAttributes: titleAttributes } = getDataForProperty('customTitle');\n  // const { textContent: titleType } = getDataForProperty('titleType');\n\n  // // Ensure that titleType is one of the valid HeadlineTags or use a default ('h2')\n  // const normalizedTitleType = validHeadlineTags.includes(titleType as HeadlineTags)\n  //   ? (titleType as HeadlineTags)\n  //   : 'h2';\n\n  cleanUpBlock(block);\n  // render(template({ titleText, titleType: normalizedTitleType }), block, {});\n  render(template2(), block);\n\n  // const headline = block.querySelector('[data-js-title-type]');\n  // titleAttributes?.forEach((attr) => {\n  //   const key = Object.keys(attr)[0];\n  //   const value = attr[key];\n  //   if (!value) return;\n  //   headline?.setAttribute(key, value);\n  // });\n}\n"],"names":["template2","html","customtitle","block","cleanUpBlock","render"],"mappings":"4HA0BA,MAAMA,EAAY,IACTC,2DAGT,SAAAC,EAAyBC,EAAoB,CAU3CC,EAAaD,CAAK,EAEXE,EAAAL,IAAaG,CAAK,CAS3B"}