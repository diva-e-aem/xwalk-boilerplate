{"version":3,"file":"customtitle.js","sources":["../../node_modules/lit-html/static.js","../../src/utils/tagMap.ts","../../src/utils/createAttributeMap.ts","../../src/utils/getElementData.ts","../../src/blocks/customtitle/customtitle.ts"],"sourcesContent":["import{html as t,svg as r}from\"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e=Symbol.for(\"\"),o=t=>{if(t?.r===e)return t?._$litStatic$},i=t=>({_$litStatic$:t,r:e}),s=(t,...r)=>({_$litStatic$:r.reduce(((r,e,o)=>r+(t=>{if(void 0!==t._$litStatic$)return t._$litStatic$;throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t}. Use 'unsafeStatic' to pass non-literal values, but\\n            take care to ensure page security.`)})(e)+t[o+1]),t[0]),r:e}),a=new Map,l=t=>(r,...e)=>{const i=e.length;let s,l;const n=[],u=[];let c,$=0,f=!1;for(;$<i;){for(c=r[$];$<i&&void 0!==(l=e[$],s=o(l));)c+=s+r[++$],f=!0;$!==i&&u.push(l),n.push(c),$++}if($===i&&n.push(r[i]),f){const t=n.join(\"$$lit$$\");void 0===(r=a.get(t))&&(n.raw=n,a.set(t,r=n)),e=u}return t(r,...e)},n=l(t),u=l(r);export{n as html,s as literal,u as svg,i as unsafeStatic,l as withStatic};\n//# sourceMappingURL=static.js.map\n","import { literal, StaticValue } from 'lit/static-html.js';\n\nexport const HEADLINE_TAGS = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] as const;\n\nexport type HeadlineTags = (typeof HEADLINE_TAGS)[number];\n\nexport const validHeadlineTags: HeadlineTags[] = [...HEADLINE_TAGS];\n\nexport const headlineTagMap: Record<HeadlineTags, StaticValue> = HEADLINE_TAGS.reduce(\n  (acc, tag) => {\n    acc[tag] = literal`${tag}`;\n    return acc;\n  },\n  {} as Record<HeadlineTags, StaticValue>\n);\n","export function createAttributeMap(element: Element) {\n  const attributes = element.attributes;\n  return [...attributes]\n    .map(({ nodeName }) => nodeName)\n    .filter((attr) => attr.startsWith('data-aue-') || attr.startsWith('data-richtext-'))\n    .map((attribute) => {\n      return {\n        [attribute]: element.getAttribute(attribute),\n      };\n    });\n}\n","import { createAttributeMap } from './createAttributeMap';\n\nexport function getElementData(block: HTMLElement) {\n  return (propName: string) => {\n    const element = block.querySelector(`[data-aue-prop=\"${propName}\"]`);\n\n    return {\n      element,\n      textContent: element?.textContent || undefined,\n      innerHTML: element?.innerHTML || undefined,\n      dataAttributes: element ? createAttributeMap(element) : undefined,\n    };\n  };\n}\n","import { html, nothing, render, TemplateResult } from 'lit';\n\nimport { cleanUpBlock } from 'Utils/cleanUpBlock';\nimport { headlineTagMap, HeadlineTags, validHeadlineTags } from 'Utils/tagMap';\nimport { getElementData } from 'Utils/getElementData';\n\nimport './customtitle.scss';\n\ntype TemplateProps = {\n  titleText?: string;\n  titleType?: HeadlineTags | undefined;\n  titleAttributes?: Record<string, string>;\n};\n\nconst template = ({ titleText, titleType = 'h2' }: TemplateProps): TemplateResult | typeof nothing => {\n  if (!titleText) {\n    return nothing;\n  }\n\n  const tag = headlineTagMap[titleType];\n\n  return html`\n    <div style=\"background: red\">\n      <${tag} data-js-title-type>${titleText}</${tag}>\n    </div>\n  `;\n};\n\nexport default function (block: HTMLElement) {\n  const getDataForProperty = getElementData(block);\n  const { textContent: titleText, dataAttributes: titleAttributes } = getDataForProperty('customTitle');\n  const { textContent: titleType } = getDataForProperty('titleType');\n\n  // Ensure that titleType is one of the valid HeadlineTags or use a default ('h2')\n  const normalizedTitleType = validHeadlineTags.includes(titleType as HeadlineTags)\n    ? (titleType as HeadlineTags)\n    : 'h2';\n\n  cleanUpBlock(block);\n  render(template({ titleText, titleType: normalizedTitleType }), block);\n\n  // eslint-disable-next-line no-console\n  console.log('>>> rendered a');\n\n  const headline = block.querySelector('[data-js-title-type]');\n  titleAttributes?.forEach((attr) => {\n    const key = Object.keys(attr)[0];\n    const value = attr[key];\n    if (!value) return;\n    headline?.setAttribute(key, value);\n  });\n}\n"],"names":["e","s","t","r","HEADLINE_TAGS","validHeadlineTags","headlineTagMap","acc","tag","literal","createAttributeMap","element","nodeName","attr","attribute","getElementData","block","propName","template","titleText","titleType","nothing","html","customtitle","getDataForProperty","titleAttributes","normalizedTitleType","cleanUpBlock","render","headline","key","value"],"mappings":"mIACA;AAAA;AAAA;AAAA;AAAA,GAKK,MAACA,EAAE,OAAO,IAAI,EAAE,EAAwEC,EAAE,CAACC,KAAK,KAAK,CAAC,aAAa,EAAE,OAAQ,CAACC,EAAEH,EAAE,IAAIG,GAAGD,GAAG,CAAC,GAAYA,EAAE,eAAX,OAAwB,OAAOA,EAAE,aAAa,MAAM,MAAM,kEAAkEA,CAAC;AAAA,+CAAsG,CAAC,GAAGF,CAAC,EAAEE,EAAE,EAAE,CAAC,EAAGA,EAAE,CAAC,CAAC,EAAE,EAAEF,CAAC,GCJnYI,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,IAAI,EAInDC,EAAoC,CAAC,GAAGD,CAAa,EAErDE,EAAoDF,EAAc,OAC7E,CAACG,EAAKC,KACAD,EAAAC,CAAG,EAAIC,IAAUD,CAAG,GACjBD,GAET,CAAC,CACH,ECdO,SAASG,EAAmBC,EAAkB,CAE5C,MAAA,CAAC,GADWA,EAAQ,UACN,EAClB,IAAI,CAAC,CAAE,SAAAC,KAAeA,CAAQ,EAC9B,OAAQC,GAASA,EAAK,WAAW,WAAW,GAAKA,EAAK,WAAW,gBAAgB,CAAC,EAClF,IAAKC,IACG,CACL,CAACA,CAAS,EAAGH,EAAQ,aAAaG,CAAS,CAAA,EAE9C,CACL,CCRO,SAASC,EAAeC,EAAoB,CACjD,OAAQC,GAAqB,CAC3B,MAAMN,EAAUK,EAAM,cAAc,mBAAmBC,CAAQ,IAAI,EAE5D,MAAA,CACL,QAAAN,EACA,aAAaA,GAAA,YAAAA,EAAS,cAAe,OACrC,WAAWA,GAAA,YAAAA,EAAS,YAAa,OACjC,eAAgBA,EAAUD,EAAmBC,CAAO,EAAI,MAAA,CAC1D,CAEJ,CCCA,MAAMO,EAAW,CAAC,CAAE,UAAAC,EAAW,UAAAC,EAAY,QAA2D,CACpG,GAAI,CAACD,EACI,OAAAE,EAGH,MAAAb,EAAMF,EAAec,CAAS,EAE7B,OAAAE;AAAAA;AAAAA,SAEAd,CAAG,uBAAuBW,CAAS,KAAKX,CAAG;AAAA;AAAA,GAGpD,EAEA,SAAAe,EAAyBP,EAAoB,CACrC,MAAAQ,EAAqBT,EAAeC,CAAK,EACzC,CAAE,YAAaG,EAAW,eAAgBM,GAAoBD,EAAmB,aAAa,EAC9F,CAAE,YAAaJ,CAAU,EAAII,EAAmB,WAAW,EAG3DE,EAAsBrB,EAAkB,SAASe,CAAyB,EAC3EA,EACD,KAEJO,EAAaX,CAAK,EAClBY,EAAOV,EAAS,CAAE,UAAAC,EAAW,UAAWO,CAAqB,CAAA,EAAGV,CAAK,EAGrE,QAAQ,IAAI,gBAAgB,EAEtB,MAAAa,EAAWb,EAAM,cAAc,sBAAsB,EAC1CS,GAAA,MAAAA,EAAA,QAASZ,GAAS,CACjC,MAAMiB,EAAM,OAAO,KAAKjB,CAAI,EAAE,CAAC,EACzBkB,EAAQlB,EAAKiB,CAAG,EACjBC,IACKF,GAAA,MAAAA,EAAA,aAAaC,EAAKC,GAAK,EAErC","x_google_ignoreList":[0]}